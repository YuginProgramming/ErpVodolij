
const escapeMarkdown = (text) => {
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

const endedShiftKeyb = () => {
    return {
        reply_markup: {
        inline_keyboard: [
            [
            { text: '–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É', callback_data: 'start_shift' }
            ],
            [
            { text: '–ö–∞–±—ñ–Ω–µ—Ç –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞', callback_data: 'start_shift' },
            ]
        ]
        }
    }
};

const processKeyb = () => {

    return {
        reply_markup: {
        inline_keyboard: [
            [
            { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏', callback_data: 'end_shift' },
            { text: '–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç—É', callback_data: 'service_machine' }
            ],
            [
            { text: '–Ü–Ω–∫–∞—Å–∞—Ü—ñ—è', callback_data: 'cash_collection' },
            { text: '–†–µ–º–æ–Ω—Ç', callback_data: 'repair' }
            ]
        ]
        }
    }
    
};

const locationKeyboard = () => {
    return {
        reply_markup: {
          keyboard: [
            [
              {
                text: 'üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é',
                request_location: true,   // –û—Å—å —Ç—É—Ç –∫–ª—é—á–æ–≤–µ!
              }
            ]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };
} 

const startShift = () => {
    return '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é —ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É:'
} 

export {
    escapeMarkdown,
    endedShiftKeyb,
    processKeyb,
    locationKeyboard,
    startShift
}