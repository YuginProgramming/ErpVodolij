import TelegramBot from 'node-telegram-bot-api';
import { dataBot } from './values.js';
import { endedShiftKeyb, locationKeyboard, processKeyb, startShift } from './keyboards.js';
import { createNewWorkerByChatId, findWorkerByChatId, updateWorkerByChatId, listWorkersBrief, setWorkerName, findWorkerById } from './models/workers.js';
import { createNewPoint, todayPoins } from './models/work-datapoint.js';
import geocode from './modules/geocode.js';
import axios from 'axios';
import { getShiftDuration } from './modules/shift-duration.js';
import { getRouteDistanceAndMapLink } from './models/distance-link.js';
import { findActiveTasksByWorker, markTaskAsDone, createTaskForWorker, findActiveTasksAll } from './models/tasks.js';
import 'dotenv/config';
import { pingDb } from './models/sequelize.js';

export const bot = new TelegramBot(dataBot.telegramBotToken, { polling: true });

await pingDb();

const findNearestCoordinate = (coordinates, targetCoordinate) => {

  const distances = coordinates.map((coordinate) => {
    const distance = Math.sqrt(
      Math.pow(coordinate.lat - targetCoordinate.lat, 2) +
      Math.pow(coordinate.lon - targetCoordinate.lon, 2)
    );
    return { coordinate, distance };
  });

  const sortedCoordinates = distances.sort((a, b) => a.distance - b.distance);

  console.log(sortedCoordinates[0]);

  return sortedCoordinates[0].coordinate;

}

const newTaskWizard = new Map(); // key: chatId -> { step, data }

async function installCommands() {
  const commands = [
    { command: '/start',      description: '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' },
    { command: '/tasks',      description: '–ú–æ—ó –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞–¥–∞—á—ñ' },
    { command: '/tasks_todo', description: '–£—Å—ñ TODO –∑–∞–¥–∞—á—ñ' },
    { command: '/tasks_all',  description: '–£—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞–¥–∞—á—ñ' },
    { command: '/newtask',    description: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É' },
    { command: '/users',      description: '–í–∏–∫–æ–Ω–∞–≤—Ü—ñ' },
    { command: '/setname',    description: '–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∞–¥–º—ñ–Ω)' },
    { command: '/cancel',     description: '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' },
  ];

  // 1) Clear old definitions across common scopes
  await bot.setMyCommands([], { scope: { type: 'default' } });
  await bot.setMyCommands([], { scope: { type: 'all_private_chats' } });
  await bot.setMyCommands([], { scope: { type: 'all_group_chats' } });

  // 2) Set for default + private + groups (so it shows everywhere)
  await bot.setMyCommands(commands); // default
  await bot.setMyCommands(commands, { scope: { type: 'all_private_chats' } });
  await bot.setMyCommands(commands, { scope: { type: 'all_group_chats' } });

  // 3) Sanity check
  const current = await bot.getMyCommands();
  console.log('[BOT] Commands installed:', current);
}

await installCommands();

const me = await bot.getMe();
console.log('[BOT] Running as', me.username);

bot.onText(/\/start/, async (msg) => {

  const chatId = msg.chat.id;
  const worker = await findWorkerByChatId(chatId);

  if (!worker) {
    await createNewWorkerByChatId(chatId);

    const keyboards = {
      contactRequest: [
        [
          {
            text: 'üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
            request_contact: true,
          }
        ]
      ]
    };

    const messageText =
      'üëã –í—ñ—Ç–∞—î–º–æ! \n\n' +
      '–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ' +
      '¬´üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª –Ω–∏–∂—á–µ.';

    bot.sendMessage(msg.chat.id, messageText, {
      reply_markup: {
        keyboard: keyboards.contactRequest,
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });

  } else {}

});

// –º–æ—ó –≤—ñ–¥–∫—Ä–∏—Ç—ñ (open = –≤—Å–µ –∫—Ä—ñ–º done/closed)
bot.onText(/\/tasks$/, async (msg) => {
  const chatId = msg.chat.id;
  const me = await findWorkerByChatId(chatId);
  if (!me) return bot.sendMessage(chatId, '–°–ø–µ—Ä—à—É /start.');

  // —è–∫—â–æ —Ç—Ä–µ–±–∞ –±–∞—á–∏—Ç–∏ —ñ –Ω–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ (NULL) –ø–æ—Ä—É—á —ñ–∑ "–º–æ—ó–º–∏":
  const tasks = await findActiveTasksByWorker(me.id, { status: 'open', limit: 100, includeUnassigned: false });

  if (!tasks.length) return bot.sendMessage(chatId, 'üéâ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å!');
  for (const t of tasks) {
    const taskText = `üìå *${t.title}*\nüóíÔ∏è ${t.description || '–ë–µ–∑ –æ–ø–∏—Å—É'}\nüìü –ê–ø–∞—Ä–∞—Ç: ${t.deviceId ?? '‚Äî'}\nüéØ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${t.priority ?? 'normal'}\nüë§ workerId: ${t.workerId ?? '‚Äî'}`;
    await bot.sendMessage(chatId, taskText, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: [[{ text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: `done_${t.id}` }]] }
    });
  }
});

// –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ (–¥–ª—è –æ–≥–ª—è–¥—É –≤—Å—ñ—î—ó –¥–æ—à–∫–∏)
bot.onText(/\/tasks_all$/, async (msg) => {
  const chatId = msg.chat.id;
  const tasks = await findActiveTasksAll({ status: 'open', limit: 200 });
  if (!tasks.length) return bot.sendMessage(chatId, '–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î.');
  for (const t of tasks) {
    const taskText = `[#${t.id}] *${t.title}* ‚Äî ${t.status}\nüë§ workerId: ${t.workerId ?? '‚Äî'}\nüóíÔ∏è ${t.description || '‚Äî'}\nüìü ${t.deviceId ?? '‚Äî'}\nüéØ ${t.priority ?? 'normal'}`;
    await bot.sendMessage(chatId, taskText, { parse_mode: 'Markdown' });
  }
});

// —Ç—ñ–ª—å–∫–∏ TODO (–≤—Å—ñ, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–≤—Ü—è)
bot.onText(/\/tasks_todo$/, async (msg) => {
  const chatId = msg.chat.id;
  const tasks = await findActiveTasksAll({ status: 'todo', limit: 200 });
  if (!tasks.length) return bot.sendMessage(chatId, 'TODO –∑–∞–¥–∞—á –Ω–µ–º–∞—î.');
  for (const t of tasks) {
    const taskText = `[#${t.id}] *${t.title}*\nüë§ workerId: ${t.workerId ?? '‚Äî'}\nüóíÔ∏è ${t.description || '‚Äî'}`;
    await bot.sendMessage(chatId, taskText, { parse_mode: 'Markdown' });
  }
});

// 1) Entry point: ask for title
bot.onText(/^\/newtask$/, async (msg) => {
  const chatId = msg.chat.id;
  const worker = await findWorkerByChatId(chatId);
  if (!worker) return bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å.');

  newTaskWizard.set(chatId, { step: 'title', data: {} });
  bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á—ñ (–∞–±–æ /cancel):');
});

bot.onText(/^\/setname\s+(\d+)\s+(.+)$/i, async (msg, m) => {
  await setWorkerName(Number(m[1]), m[2].trim());
  bot.sendMessage(msg.chat.id, `OK. #${m[1]} ‚Üí "${m[2].trim()}"`);
});

bot.onText(/^\/users$/, async (msg) => {
  const list = await listWorkersBrief(50);
  const text = list.map(w => `‚Ä¢ #${w.id} ‚Äî ${w.display}`).join('\n') || '–ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤.';
  bot.sendMessage(msg.chat.id, `–í–∏–∫–æ–Ω–∞–≤—Ü—ñ:\n${text}`);
});

// 2) Capture text for the wizard
bot.on('text', async (msg) => {
  const chatId = msg.chat.id;
  const st = newTaskWizard.get(chatId);
  if (!st) return;

  // Cancel
  if (/^\/cancel$/i.test(msg.text || '')) {
    newTaskWizard.delete(chatId);
    return bot.sendMessage(chatId, '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
  }

  // TITLE
  if (st.step === 'title') {
    const title = (msg.text || '').trim();
    if (!title) return bot.sendMessage(chatId, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–±–æ /cancel.');
    st.data.title = title;
    st.step = 'description';
    return bot.sendMessage(chatId, '–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–∞–±–æ "-" —è–∫—â–æ –±–µ–∑ –æ–ø–∏—Å—É):');
  }

  // DESCRIPTION
  if (st.step === 'description') {
    st.data.description = (msg.text?.trim() === '-') ? null : msg.text.trim();
    st.step = 'assignee';
    return bot.sendMessage(
      chatId,
      '–ö–æ–º—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏? –í–≤–µ–¥—ñ—Ç—å *workerId* (—á–∏—Å–ª–æ) –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *me* —è–∫—â–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å ‚Äî –≤–∏.',
      { parse_mode: 'Markdown' }
    );
  }

  // ASSIGNEE
  if (st.step === 'assignee') {
    const raw = (msg.text || '').trim().toLowerCase();
    let assigneeId;
    if (raw === 'me') {
      const me = await findWorkerByChatId(chatId);
      if (!me) return bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
      assigneeId = me.id;
    } else if (/^\d+$/.test(raw)) {
      assigneeId = Number(raw);
    } else {
      return bot.sendMessage(chatId, 'workerId –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∞–±–æ "me". –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    }

    const exists = await findWorkerById(assigneeId);
    if (!exists) {
      return bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –Ω–µ–º–∞—î. –í–≤–µ–¥—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π workerId –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /users.');
    }

    st.data.assigneeId = assigneeId;
    st.step = 'device';
    return bot.sendMessage(chatId, 'ID –∞–ø–∞—Ä–∞—Ç–∞ (–∞–±–æ "-" —è–∫—â–æ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏):');
  }

  // DEVICE
  if (st.step === 'device') {
    const raw = (msg.text || '').trim();
    st.data.deviceId = raw === '-' ? null : Number(raw);
    if (st.data.deviceId !== null && Number.isNaN(st.data.deviceId)) {
      return bot.sendMessage(chatId, 'ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∞–±–æ "-", —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    }
    st.step = 'priority';
    return bot.sendMessage(chatId, '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (low|normal|high). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: normal:', {
      reply_markup: {
        keyboard: [[{ text: 'low' }, { text: 'normal' }, { text: 'high' }]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // PRIORITY
  if (st.step === 'priority') {
    const pr = (msg.text || 'normal').toLowerCase();
    st.data.priority = ['low', 'normal', 'high'].includes(pr) ? pr : 'normal';
    st.step = 'confirm';

    const preview =
`–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ?

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${st.data.title}
–û–ø–∏—Å: ${st.data.description ?? '‚Äî'}
–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (workerId): ${st.data.assigneeId}
–ê–ø–∞—Ä–∞—Ç: ${st.data.deviceId ?? '‚Äî'}
–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${st.data.priority}

–ù–∞–¥—ñ—à–ª—ñ—Ç—å "ok" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ /cancel.`;
    return bot.sendMessage(chatId, preview, { reply_markup: { remove_keyboard: true } });
  }

  // CONFIRM
  if (st.step === 'confirm') {
    if ((msg.text || '').trim().toLowerCase() !== 'ok') {
      return bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å "ok" –∞–±–æ /cancel.');
    }

    // –¥—É–±–ª—é—é—á–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ FK
    const assignee = await findWorkerById(st.data.assigneeId);
    if (!assignee) {
      return bot.sendMessage(chatId, '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑ —Ç–∞–∫–∏–º workerId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (/users).');
    }

    const me = await findWorkerByChatId(chatId);
    const taskId = await createTaskForWorker({
      title: st.data.title,
      description: st.data.description,
      priority: st.data.priority,
      deviceId: st.data.deviceId,
      assigneeWorkerId: st.data.assigneeId,
      creatorWorkerId: me?.id,
    });

    newTaskWizard.delete(chatId);
    return bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á—É #${taskId} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é #${st.data.assigneeId}.`);
  }
});



bot.on("message", async (msg) => {

  const chatId = msg.chat.id;

  if (msg.contact) {

    await updateWorkerByChatId(chatId, {

      name: msg.contact.first_name,
      phone: msg.contact.phone_number,

    })

    bot.sendMessage(msg.chat.id, startShift(), locationKeyboard());

  }

});

bot.on("location", async (msg) => {

  const chatId = msg.chat.id;

  const worker = await findWorkerByChatId(chatId);

  console.log(worker.dialoguestatus)

  console.log(worker.active)

  if (!worker.active) {

    await updateWorkerByChatId(chatId, { active: true })

    const locations = await axios.get('http://soliton.net.ua/water/api/devices');

    const targetCoordinate = { lat: msg.location.latitude, lon: msg.location.longitude };

    const nearest = findNearestCoordinate(locations.data.devices, targetCoordinate);

    const address = await geocode(targetCoordinate);

    await createNewPoint({

      user_id: worker.id,
      workType: 'shift started',
      deviceId: nearest.id,
      latitude: nearest.lat,
      longitude: nearest.lon,
      address: address

    });

    //–ó–º—ñ–Ω—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ



    const message =
      `üîî –ó–º—ñ–Ω—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ.\n` +
      `–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}.\n` +
      `–ù–∞–π–±–ª–∏–∂—á–∏–π –∞–≤—Ç–æ–º–∞—Ç: ${nearest.id}.\n\n` +
      `–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:`;

    bot.sendMessage(msg.chat.id, message, processKeyb());

  } else {

    const locations = await axios.get('http://soliton.net.ua/water/api/devices');

    const targetCoordinate = { lat: msg.location.latitude, lon: msg.location.longitude };

    const nearest = findNearestCoordinate(locations.data.devices, targetCoordinate);

    const address = await geocode(targetCoordinate);

    switch (worker.dialoguestatus) {
      case 'end_shift':

        await updateWorkerByChatId(chatId, { active: false, dialoguestatus: '' });

        await createNewPoint({

          user_id: worker.id,
          workType: 'end_shift',
          deviceId: nearest.id,
          latitude: nearest.lat,
          longitude: nearest.lon,
          address: address

        });

        const shiftPoints = await todayPoins(worker.id);

        const durationString = getShiftDuration(shiftPoints);

        const { distanceKm, mapLink } = await getRouteDistanceAndMapLink(shiftPoints);

        const message =
          `üîî –ó–º—ñ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n` +
          `–ó–º—ñ–Ω–∞ —Ç—Ä–∏–≤–∞–ª–∞: ${durationString}\n` +
          `–ü—Ä–æ—Ç—è–∂–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É: ${distanceKm}\n` +
          `–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—ñ: ${mapLink}\n` +
          `–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}.\n` +
          `–ù–∞–π–±–ª–∏–∂—á–∏–π –∞–≤—Ç–æ–º–∞—Ç: ${nearest.id}.\n\n` +
          `–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:`;

        bot.sendMessage(msg.chat.id, message, endedShiftKeyb());
        break;
      case 'service_machine':
        await createNewPoint({

          user_id: worker.id,
          workType: 'service_machine',
          deviceId: nearest.id,
          latitude: nearest.lat,
          longitude: nearest.lon,
          address: address

        });

        const serviceMessage =
          `üîî –û—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n` +
          `–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}.\n` +
          `–ù–∞–π–±–ª–∏–∂—á–∏–π –∞–≤—Ç–æ–º–∞—Ç: ${nearest.id}.\n\n` +
          `–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:`;

        bot.sendMessage(msg.chat.id, serviceMessage, processKeyb());

        break;
      case 'cash_collection':

        await createNewPoint({

          user_id: worker.id,
          workType: 'cash_collection',
          deviceId: nearest.id,
          latitude: nearest.lat,
          longitude: nearest.lon,
          address: address

        });

        const cashMessage =
          `üîî –Ü–Ω–∫–∞—Å–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n` +
          `–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}.\n` +
          `–ù–∞–π–±–ª–∏–∂—á–∏–π –∞–≤—Ç–æ–º–∞—Ç: ${nearest.id}.\n\n` +
          `–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:`;

        bot.sendMessage(msg.chat.id, cashMessage, processKeyb());

        break;
      case 'repair':

        await createNewPoint({

          user_id: worker.id,
          workType: 'repair',
          deviceId: nearest.id,
          latitude: nearest.lat,
          longitude: nearest.lon,
          address: address

        });

        const repairMessage =
          `üîî –†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n` +
          `–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}.\n` +
          `–ù–∞–π–±–ª–∏–∂—á–∏–π –∞–≤—Ç–æ–º–∞—Ç: ${nearest.id}.\n\n` +
          `–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:`;

        bot.sendMessage(msg.chat.id, repairMessage, processKeyb());

        break;

    }

  }

});

bot.on('callback_query', async (callbackQuery) => {

  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = msg.chat.id;

  switch (data) {

    case 'end_shift':

      await updateWorkerByChatId(chatId, { dialoguestatus: 'end_shift' });
      bot.sendMessage(chatId, '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é.', locationKeyboard());

      break;

    case 'service_machine':

      await updateWorkerByChatId(chatId, { dialoguestatus: 'service_machine' });
      bot.sendMessage(chatId, '–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é.', locationKeyboard());
      break;

    case 'cash_collection':

      await updateWorkerByChatId(chatId, { dialoguestatus: 'cash_collection' });
      bot.sendMessage(chatId, '–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é.', locationKeyboard());
      break;

    case 'repair':

      await updateWorkerByChatId(chatId, { dialoguestatus: 'repair' });
      bot.sendMessage(chatId, '–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é.', locationKeyboard());
      break;

    case 'start_shift':

      bot.sendMessage(msg.chat.id, startShift(), locationKeyboard());

      break;

    default:

      if (data.startsWith('done_')) {
        const taskId = data.split('_')[1];

        await markTaskAsDone(taskId);

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          {
            chat_id: chatId,
            message_id: msg.message_id
          }
        );

        await bot.sendMessage(chatId, '‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!');

      } else {
        bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
  }

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ callback, —â–æ–± –∑–Ω—è—Ç–∏ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
  bot.answerCallbackQuery(callbackQuery.id);
});
